plugins {
    id 'java-library'
    id "org.sonarqube" version "3.3"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'signing'
    id 'maven-publish'
}

group = 'de.codemakers'
version = '1.3.0'
description = 'Open source Java library for simple usage of the xREL API.'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.9.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.13.0-rc1'
}

compileJava {
    options.release = 16
}

test {
    useJUnitPlatform()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'xREL4J'
            from components.java
            //artifact shadowJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'xREL4J'
                description = 'Open source Java library for simple usage of the xREL API.'
                url = 'https://github.com/Panzer1119/xREL4J'
                licenses {
                    license {
                        name = 'GNU General Public License, version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'saftsau'
                        name = 'saftsau'
                        email = 'saftsau@users.noreply.github.com'
                    }
                    developer {
                        id = 'panzer1119'
                        name = 'Paul Hagedorn'
                        email = 'panzer1119@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "customRepository"
            def releasesRepoUrl = System.getenv("MAVEN_URL_RELEASES")
            def snapshotsRepoUrl = System.getenv("MAVEN_URL_SNAPSHOTS")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if(hasSigningKey) {
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.mavenJava
    }
}
